% This file was created with Citavi 6.10.0.0

@misc{AndroidDevelopersDoc,
 author = {{Android Developers}},
 year = {23.09.2021},
 title = {Documentation Android Developers},
 url = {https://developer.android.com/docs},
 urldate = {29.09.2021}
}


@misc{AppCode,
 author = {Dombrovsky, Stanislav},
 year = {2021},
 title = {Kotlin Multiplatform Mobile for AppCode | The Kotlin Blog},
 url = {https://blog.jetbrains.com/kotlin/2021/06/kmm-for-appcode/},
 urldate = {30.09.2021}
}


@misc{BasilDesign,
 year = {2021},
 title = {Basil},
 url = {https://material.io/design/material-studies/basil.html},
 urldate = {30.09.2021}
}


@misc{CaseStudies,
 year = {17.09.2021},
 title = {Case Studies | Kotlin Multiplatform Mobile},
 url = {https://kotlinlang.org/lp/mobile/case-studies/},
 urldate = {30.09.2021}
}


@book{CleanArch,
 abstract = {Durch die Anwendung allgemeing{\"u}ltiger Regeln der Softwarearchitektur k{\"o}nnen Sie die Produktivit{\"a}t der Softwareentwicklung {\"u}ber gesamten Lebenszyklus eines beliebigen Softwaresystems enorm verbessern. Nach seinen Bestseller-Erfolgen Clean Code und The Clean Coder blickt der legend{\"a}re amerikanische Softwareexperte Robert C. Martin (Uncle Bob) in seinem j{\"u}ngsten Werk hinter die Kulissen dieser Regeln und bietet Ihnen wertvolle Hilfestellung f{\"u}r deren Umsetzung in der Praxis.Dabei werden in Clean Architecture jedoch nicht blo{\ss} die verschiedenen zur Verf{\"u}gung stehenden M{\"o}glichkeiten vorgestellt. Dar{\"u}ber hinaus l{\"a}sst Sie Martin auch an seiner mehr als 50-j{\"a}hrigen professionellen Erfahrung mit Softwareumgebungen jeder erdenklichen Art teilhaben, um Ihnen aufzuzeigen, welche wichtigen Entscheidungen Sie treffen m{\"u}ssen und warum diese f{\"u}r Ihren Erfolg eine ausschlaggebende Rolle spielen. Wie man es von Uncle Bob erwarten kann, beschreibt auch dieses Buch geradlinige, zielf{\"u}hrende L{\"o}sungen f{\"u}r die realen Herausforderungen, mit denen Sie sich konfrontiert sehen werden  eben genau diejenigen, die f{\"u}r den Erfolg oder Misserfolg Ihrer Projekte ma{\ss}geblich sind. Sie erfahren, was Softwarearchitekten erreichen m{\"u}ssen  und welche Kerndisziplinen und -praktiken daf{\"u}r erforderlich sind; wie Sie die wesentlichen Prinzipien des Softwaredesigns in Bezug auf die Funktionalit{\"a}t, die Komponententrennung und das Datenmanagement meistern; inwieweit Programmierparadigmen die Arbeit der Softwareentwickler einer Disziplin unterwerfen, die ihre Handlungsspielr{\"a}ume einschr{\"a}nkt; welche architektonischen Aspekte von entscheidender Bedeutung und welche eher unwesentliche Details sind; wie Sie optimale {\"u}bergeordnete Strukturen f{\"u}r das Web, Datenbanken, Fat Clients, Konsolen und eingebettete Anwendungen implementieren; wie Sie geeignete Grenzen und Layer definieren sowie Komponenten und Services organisieren; warum Softwaredesigns und -architekturen scheitern und wie man solchen Fehlschl{\"a}gen vorbeugen (oder auch beheben) kann. Clean Architecture ist eine Pflichtlekt{\"u}re f{\"u}r alle aktiven und angehenden Softwarearchitekten, Systemanalytiker, Systementwickler und Softwaremanager  und f{\"u}r jeden Programmierer, der die Designs eines anderen ausf{\"u}hren muss.},
 author = {Martin, Robert C.},
 year = {2018},
 title = {Clean architecture: Das Praxis-Handbuch f{\"u}r professionelles Softwaredesign : Regeln und Paradigmen f{\"u}r effiziente Softwarestrukturen},
 price = {Broschur : EUR 29.99 (DE), circa EUR 29.99 (AT)},
 keywords = {Programmierparadigma;Softwarearchitektur;Softwareentwicklung;Softwarelebenszyklus;ST 230},
 address = {Frechen},
 edition = {Deutsche Ausgabe, 1. Auflage},
 publisher = {mitp},
 isbn = {9783958457263}
}


@article{CleanArchSchema,
 abstract = {Das Clean-Architecture-Model schafft ein System, das direkt testbar ist und hochgradig anpassungsf{\"a}hig ist.},
 author = {Redaktion, Tup},
 year = {9.2.2021},
 title = {Definition des Software-Architektur-Prinzips {\glq}Clean Architecture{\grq}},
 url = {https://logistikknowhow.com/it-und-software/definition-des-software-architektur-prinzips-clean-architecture/},
 urldate = {29.09.2021},
 journal = {Dr. Thomas + Partner GmbH {\&} Co. KG}
}


@misc{CocoaPods,
 year = {29.09.2021},
 title = {CocoaPods.org},
 url = {https://cocoapods.org/},
 urldate = {29.09.2021}
}


@misc{CoreFoundation,
 year = {29.09.2021},
 title = {Core Foundation | Apple Developer Documentation},
 url = {https://developer.apple.com/documentation/corefoundation},
 urldate = {29.09.2021}
}


@misc{Coroutine,
 abstract = {{\textquotedbl}{\textgreater}{\textless}meta property=},
 author = {{Kotlin Help}},
 year = {2021},
 title = {Coroutines basics | Kotlin},
 url = {https://kotlinlang.org/docs/coroutines-basics.html#your-first-coroutine},
 urldate = {30.09.2021}
}


@misc{CoroutinesGuide,
 abstract = {{\textquotedbl}{\textgreater}{\textless}meta property=},
 author = {{Kotlin Help}},
 year = {2021},
 title = {Coroutines guide | Kotlin},
 url = {https://kotlinlang.org/docs/coroutines-guide.html},
 urldate = {30.09.2021}
}


@misc{D_KMP,
 abstract = {D-KMP Architecture official sample: it uses a shared KMP ViewModel and Navigation for Compose and SwiftUI apps. - dbaroncelli/D-KMP-sample: D-KMP Architecture official sample: it uses a shared KMP ViewModel and Navigation for Compose and SwiftUI apps.},
 author = {Baroncelli, Daniele},
 year = {2021},
 title = {dbaroncelli/D-KMP-sample: D-KMP Architecture official sample: it uses a shared KMP ViewModel and Navigation for Compose and SwiftUI apps},
 url = {https://github.com/dbaroncelli/D-KMP-sample},
 urldate = {30.09.2021}
}


@misc{DesignEntwicklung,
 abstract = {Wireframing ist ein wichtiger Schritt in jedem Screen-Design-Prozess. Das Wireframing - {\"u}bersetzt bedeutet es in etwa das Erstellen eines Drahtger{\"u}sts - erm{\"o}glicht es Ihnen in erster Linie, die...},
 author = {Lim, Winnie},
 year = {2020},
 title = {Ein Wireframing-Leitfaden f{\"u}r Einsteiger},
 url = {https://webdesign.tutsplus.com/de/articles/a-beginners-guide-to-wireframing--webdesign-7399},
 urldate = {30.09.2021},
 file = {Lim 16.09.2020 - Ein Wireframing-Leitfaden f{\"u}r Einsteiger:Attachments/Lim 16.09.2020 - Ein Wireframing-Leitfaden f{\"u}r Einsteiger.pdf:application/pdf}
}


@misc{ExpectActualBeta,
 abstract = {{\textquotedbl}{\textgreater}{\textless}meta property=},
 author = {kotlinlang},
 year = {2021},
 title = {Connect to platform-specific APIs | Kotlin},
 url = {https://kotlinlang.org/docs/mpp-connect-to-apis.html},
 keywords = {The expect/ actual feature is in Beta. It is almost stable, but migration steps may be required in the future. We'll do our best to minimize any changes you will have to make.},
 urldate = {29.09.2021}
}


@misc{FlowHelper,
 abstract = {I have setup a Kotlin Multiplatform project and attached a SQLDelight database to it. Its all setup and running correctly as i have tested it on the android side using the following:

commonMain:

val backgroundColorFlow: Flow{\textless}Color{\textgreater} =

dbQuery.getColorWithId(BGColor.id)

.asFlow()

.mapToOneNotNull()

which triggers fine in the Android projects MainActivity.kt using:

database.backgroundColorFlow.onEach { setBackgroundColor(it.hex) }.launchIn(lifecycleScope)

but when trying to access the same call in the iOS projects app delegate i get the following options and im unsure how to use them or convert them into my BGColor object:

database.backgroundColorFlow.collect(collector: T{\#}{\#}Kotlinx{\_}coroutines{\_}coreFlowCollector, completionHandler: (KotlinUnit?, Error?) -{\textgreater} Void)

can anyone help me with how to use this?},
 author = {Wazza},
 year = {2020},
 title = {Listen to Kotlin coroutine flow from iOS},
 url = {https://stackoverflow.com/questions/64175099/listen-to-kotlin-coroutine-flow-from-ios/64223522#64223522},
 urldate = {30.09.2021}
}


@misc{Food2Fork,
 abstract = {Kotlin Multiplatform project that gets network data from Food2Fork.ca - mitchtabian/Food2Fork-KMM: Kotlin Multiplatform project that gets network data from Food2Fork.ca},
 author = {{Mitch Tabian}},
 year = {2021},
 title = {mitchtabian/Food2Fork-KMM: Kotlin Multiplatform project that gets network data from Food2Fork.ca},
 url = {https://github.com/mitchtabian/Food2Fork-KMM},
 urldate = {30.09.2021}
}


@misc{GalliganHistory,
 abstract = {In this latest post we recap our recent collaboration with Square on Kotlin Multiplatform (KMP). Check it out today, we hope you enjoy it!},
 author = {Galligan, Kevin},
 year = {2019},
 title = {Touchlab {\&} Square Kotlin Multiplatform Collab // Touchlab},
 url = {https://touchlab.co/touchlab-square-collaborating-on-kotlin-multiplatform/},
 urldate = {29.09.2021}
}


@misc{GitHubKoinIssue,
 abstract = {I'd try to use Koin 3.0.1 with new Jetpack Compose Navigation component. I'd pass ViewModel instance to Composable function using {\textquotedbl}composabe way{\textquotedbl} - @composable fun ComposableFun(viewmodel: MyViewModel = getViewModel()) {...} If I'm not u...},
 author = {GitHub},
 year = {29.09.2021},
 title = {Koin 3.0.1 + Jetpack Compose Navigation - getViewModel() create new ViewModel instance instead of return existing one · Issue {\#}1079 · InsertKoinIO/koin},
 url = {https://github.com/InsertKoinIO/koin/issues/1079},
 urldate = {29.09.2021}
}


@misc{GradyBooch,
 author = {{Grady Booch}},
 year = {2018},
 title = {{\textquotedbl}Software architecture represents the significant design decisions that shape a system, where significant is measured by cost of change.{\textquotedbl}},
 url = {https://twitter.com/Grady_Booch/status/1071674450767048704},
 urldate = {29.09.2021}
}


@misc{JpcInternals,
 abstract = {This books heavily focuses on the internals of Jetpack Compose. As an Android developer and over the years, I have grown a feeling of how astoundingly important can become to learn about internals of the platform you work with every day. That helps me a lot to understand what code I want to write. 

Having that type of knowledge allows me to write performant code that complies to the platform expectations instead of going against them, and allows me to understand why things work the way they do. To me, this is probably one of the biggest differences between non very experienced and experienced Android developers. For many years we have all been diving into lower aspects of the platform like layout and draw passes, drawing efficiency, internals of the View system, styles and themes, lifecycles, and much more. 

This book is an opportunity to do the same but for Jetpack Compose, and open your mind in terms of how to think about it, given how important it is going to become for the years to come. My personal goal as the author of this book is to give you all the tools to achieve a big leap on this field.},
 author = {Castillo, Jorge},
 editor = {leanpub.com},
 year = {2021},
 title = {Jetpack Compose internals},
 url = {https://leanpub.com/composeinternals},
 file = {composeinternals:Attachments/composeinternals.pdf:application/pdf}
}


@misc{KaMPKit,
 abstract = {KaMP Kit by Touchlab is a collection of code and tools designed to get your mobile team started quickly with Kotlin Multiplatform. - touchlab/KaMPKit: KaMP Kit by Touchlab is a collection of code and tools designed to get your mobile team started quickly with Kotlin Multiplatform.},
 author = {Touchlab},
 title = {touchlab/KaMPKit: KaMP Kit by Touchlab is a collection of code and tools designed to get your mobile team started quickly with Kotlin Multiplatform},
 url = {https://github.com/touchlab/KaMPKit},
 urldate = {30.09.2021}
}


@misc{KmmPlugin,
 abstract = {{\textquotedbl}{\textgreater}{\textless}meta property=},
 author = {{Kotlin Help}},
 year = {2021},
 title = {KMM plugin releases | Kotlin},
 url = {https://kotlinlang.org/docs/kmm-plugin-releases.html},
 urldate = {30.09.2021}
}


@misc{KmmProduction,
 abstract = {Kotlin Multiplatform Mobile (KMM) is the culmination of years of work making the Kotlin programming language perform admirably across many platforms and code...},
 author = {{Twin Cities Kotlin Users Group}},
 year = {16.07.2021},
 title = {KMM: Learn How Multiplatform Went Down in the Real World},
 url = {https://www.youtube.com/watch?v=R39huQqf0J0},
 urldate = {30.09.2021}
}


@article{KMMvsKMP,
 abstract = {Before I begin, allow me to point out that I do not work for JetBrains, and while I do have contacts at the company, this post represents my understanding of the situation regarding these two$\ldots$},
 author = {Wong, Kris},
 year = {22.1.2021},
 title = {KMM vs. KMP --- What's the Deal? - VMware 360 - Medium},
 url = {https://medium.com/vmware-end-user-computing/kmm-vs-kmp-whats-the-deal-dd64bc5d61f2},
 urldate = {29.09.2021},
 journal = {VMware 360}
}


@misc{KotlinxSerializerIssue,
 abstract = {Describe the bug kotlin.native.concurrent.InvalidMutabilityException: mutation attempt of frozen kotlin.collections.HashMap To Reproduce If I execute the same Request from the same HTTP Client, the Request executes Successfully with the ...},
 author = {{Kotlinx Serialization}},
 year = {2021},
 title = {kotlin.native.concurrent.InvalidMutabilityException: mutation attempt of frozen kotlin.collections.HashMap · Issue {\#}1450 · Kotlin/kotlinx.serialization},
 url = {https://github.com/Kotlin/kotlinx.serialization/issues/1450},
 urldate = {30.09.2021}
}


@misc{KtorHeader,
 abstract = {{\textquotedbl}{\textgreater}{\textless}meta property=},
 author = {{Kotlin Help}},
 year = {2021},
 title = {Use Ktor for networking | Kotlin},
 url = {https://kotlinlang.org/docs/kmm-use-ktor-for-networking.html#headers},
 urldate = {30.09.2021}
}


@misc{MaterialDesign,
 year = {2021},
 title = {Homepage - Material Design},
 url = {https://material.io/},
 urldate = {30.09.2021}
}


@article{Netflix,
 abstract = {Over the last few years Netflix has been developing a mobile app called Prodicle to innovate in the physical production of TV shows and movies. The world of physical production is fast-paced, and$\ldots$},
 author = {Henry, David and Yahya, Mel},
 year = {29.10.2020},
 title = {Netflix Android and iOS Studio Apps --- now powered by Kotlin Multiplatform},
 url = {https://netflixtechblog.com/netflix-android-and-ios-studio-apps-kotlin-multiplatform-d6d4d8d25d23},
 urldate = {30.09.2021},
 journal = {Netflix TechBlog},
 file = {Blog 29.10.2020 - Netflix Android and iOS Studio:Attachments/Blog 29.10.2020 - Netflix Android and iOS Studio.pdf:application/pdf}
}


@misc{PeopleInSpace,
 abstract = {Minimal Kotlin Multiplatform project with SwiftUI, Jetpack Compose, Compose for Desktop, Compose for Web and Kotlin/JS + React clients along with Ktor backend. - GitHub - joreilly/PeopleInSpace: Minimal Kotlin Multiplatform project with SwiftUI, Jetpack Compose, Compose for Desktop, Compose for Web and Kotlin/JS + React clients along with Ktor backend.},
 author = {O'Reilly, John},
 year = {2020},
 title = {PeopleInSpace: Minimal Kotlin Multiplatform project with SwiftUI, Jetpack Compose, Compose for Desktop, Compose for Web and Kotlin/JS + React clients along with Ktor backend},
 url = {https://github.com/joreilly/PeopleInSpace},
 urldate = {29.09.2021},
 howpublished = {GitHub}
}


@misc{Realm,
 year = {24.09.2021},
 title = {MongoDB Realm Kotlin Multiplatform SDK (Alpha) --- MongoDB Realm},
 url = {https://docs.mongodb.com/realm/sdk/kotlin-multiplatform/},
 urldate = {30.09.2021}
}


@misc{SQLDelightStatistik,
 abstract = {Caching in Android is an interesting task and there are quite a few ways you can do that. But here's the question --- Which way is the best for me? With this article I want to try to answer that$\ldots$},
 author = {Levonyan, Robert},
 year = {2021},
 title = {Local Databases in Android: Choosing What's Best for Your Project},
 url = {https://proandroiddev.com/cache-data-in-android-2e4042b07df3},
 urldate = {30.09.2021},
 file = {Levonyan 04.03.2021 - Local Databases in Android:Attachments/Levonyan 04.03.2021 - Local Databases in Android.pdf:application/pdf}
}


@misc{SSOT,
 abstract = {Eine einzige verl{\"a}ssliche Datenquelle (Single Source of Truth, SSOT) hilft dabei, die negativen Auswirkungen von Datensilos zu verringern.},
 year = {2019},
 title = {Was ist Single Source of Truth (SSOT)? - Definition von WhatIs.com},
 url = {https://whatis.techtarget.com/de/definition/Single-Source-of-Truth-SSOT},
 urldate = {29.09.2021}
}


@misc{StateHoisting,
 author = {{Android Developers}},
 year = {2021},
 title = {State and Jetpack Compose {\&}nbsp;|{\&}nbsp; Android Developers},
 url = {https://developer.android.com/jetpack/compose/state#state-hoisting},
 urldate = {02.10.2021}
}


@misc{UiTest,
 year = {2021},
 title = {Testing cheatsheet; Jetpack Compose; Android Developers},
 url = {https://developer.android.com/jetpack/compose/testing-cheatsheet},
 urldate = {30.09.2021}
}


@misc{VRGsoft,
 abstract = {There are many approaches to build complex systems with good architecture. Despite the small differences in these approaches they have a lot in common. Of course, they all ask how ...},
 author = {{VRG soft}},
 year = {2017},
 title = {Clean Architecture for Android with Kotlin - VRG soft},
 url = {https://vrgsoft.net/blog/clean-architecture-for-android/},
 urldate = {29.09.2021}
}


